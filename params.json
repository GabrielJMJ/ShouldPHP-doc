{"name":"ShouldPHP documentation","tagline":"The ShouldPHP documentation","body":"## Index\r\n* [Basic requirements](http://gabrieljmj.github.io/shouldphp-doc#basic-requirements)\r\n* [Instalation](http://gabrieljmj.github.io/shouldphp-doc#instalation)\r\n* [How it works?](http://gabrieljmj.github.io/shouldphp-doc#how-it-works)\r\n * [Creating an ambient](http://gabrieljmj.github.io/shouldphp-doc#creating-an-ambient)\r\n * [Creating an assertion](http://gabrieljmj.github.io/shouldphp-doc#creating-an-assertion)\r\n* [Assertions](http://gabrieljmj.github.io/shouldphp-doc#assertions)\r\n * [Assertions for classes and objects](http://gabrieljmj.github.io/shouldphp-doc#assertions-for-classes-and-objects)\r\n * [Assertions for methods](http://gabrieljmj.github.io/shouldphp-doc#assertions-for-methods)\r\n * [Assertions for properties](http://gabrieljmj.github.io/shouldphp-doc#assertions-for-properties)\r\n * [Assertions for methods parameters](http://gabrieljmj.github.io/shouldphp-doc#assertions-for-methods-parameters)\r\n* [Options](http://gabrieljmj.github.io/shouldphp-doc#options)\r\n * [Visibility](http://gabrieljmj.github.io/shouldphp-doc#visibility)\r\n * [Type Hinting](http://gabrieljmj.github.io/shouldphp-doc#type-hinting)\r\n* [Executing tests](http://gabrieljmj.github.io/shouldphp-doc#executing-tests)\r\n * [should.json](http://gabrieljmj.github.io/shouldphp-doc#shouldjson)\r\n * [Explaining by the example](http://gabrieljmj.github.io/shouldphp-doc#explaining-by-the-example)\r\n * [Saving the report logs](http://gabrieljmj.github.io/shouldphp-doc#saving-the-report-logs)\r\n * [Showing the report with console colors](http://gabrieljmj.github.io/shouldphp-doc#showing-the-report-with-console-colors)\r\n\r\n## Basic requirements\r\nTo use **ShouldPHP** you must have this requirements:\r\n* PHP >= 5.5\r\n\r\n## Instalation\r\nYou can install **ShouldPHP** via [Composer](https://getcomposer.org). If you don't know how to use Composer, enter in their [documentation](https://getcomposer.org/doc/) or read this good [intruduction/tutorial](http://code.tutsplus.com/tutorials/easy-package-management-with-composer--net-25530).\r\nAfter that, put this package in your requirements:\r\n```json\r\n\"gabrieljmj/should-php\": \"1.0.*@dev\"\r\n```\r\n\r\n## How it works?\r\nThe tests are written with a simple syntax, easy to understand, based in \"*should*\". Basically \"*should be*\" and \"*should have*\". You can test classes, objects, methods, methods arguments and properties.\r\n\r\n### Creating an ambient\r\nAmbient in **ShouldPHP** are basically test suites. To create a standard ambient you have to instaciate the class ```Gabrieljmj\\Should\\Ambient\\Ambient```. Like that, simply:\r\n```php\r\nuse Gabrieljmj\\Should\\Ambient\\Ambient;\r\n\r\n$ambient = new Ambient('my_ambient');\r\n```\r\nand have as return in the file the instance:\r\n```php\r\n$ambient->theClass('Foo')->should->be->instance('Bar');\r\nreturn $ambient;\r\n```\r\nYou can also create ambients objects extending ```Gabrieljmj\\Should\\Ambient\\Ambient```. It will provides to you all assertion types methods. Each test from ambient must have the preffix ```test```.\r\n``` php\r\nuse Gabrieljmj\\Should\\Ambient\\Ambient;\r\nuse MyApp\\User;\r\n\r\nclass UserAmbient extends Ambient\r\n{\r\n    public function testIfTheGetterForNameReturnsTheCorrectValue()\r\n    {\r\n        $name = 'Gabriel';\r\n        $user = new User();\r\n        $user->setName($name);\r\n        \r\n        $this->theMethod($user, 'getName')->should->have->asReturn($name);\r\n    }\r\n}\r\n```\r\n\r\n### Creating an assertion\r\nAll the assertions types are provided by an ambient. You can see an example here:\r\n```php\r\n$ambient->theClass('Foo')->should->have->theProperty('bar');\r\n```\r\n| Ambient method | Arguments | Description |\r\n| :------------- | :-------- | :---------- |\r\n| ```Ambient::theClass``` | ```$class``` | Provides assertions for classes and objects. |\r\n| ```Ambient::theMethod``` | ```$class, $method``` | Provides assertions for classes methods. |\r\n| ```Ambient::theParameter``` | ```$class, $method, $parameter``` | Provides assertions for methods parameters. |\r\n| ```Ambient::theProperty``` | ```$class, $property``` | Provies assertions for classes/objects properties. |\r\n##Assertions\r\n\r\n### Assertions for classes and objects\r\n| Assert | Arguments | Description |\r\n| :----- | :-------- | :---------- |\r\n| *be*.equal | ```object $class[, $message = null]``` | Tests if an object is equal another. |\r\n| *be*.instance | ```$class[, $message = null]``` | Tests if a object is of the a class or has this class as one of its parents. |\r\n| *have*.theProperty | ```$property[, $message = null]``` | Tests if a class has certain property. |\r\n| *have*.theMethod | ```$method[, $message = null]``` | Tests if a class has certain method. |\r\n\r\n### Assertions for methods\r\n| Assert | Arguments | Description |\r\n| :----- | :-------- | :---------- |\r\n| *be*.visible | ```$as[, $message = null]``` | Tests if the visibility is the same as the determined. Is recommended to use the constants of ```Gabrieljmj\\Should\\Options\\Visibility```. Check it [here](https://github.com/GabrielJMJ/ShouldPHP/wiki/Documentation#visibility). |\r\n| *have*.argumentsEqual | ```array $args[, $message = null]``` | Tests if the arguments of the method are equal expected. |\r\n| *have*.asReturn | ```$return, array $args[, $message = null]``` | Tests if the return of a method is equal expected. |\r\n\r\n### Assertions for properties\r\n| Assert | Arguments | Description |\r\n| :----- | :-------- | :---------- |\r\n| *be*.equal | ```$value[, $message = null]``` | Tests if a class has a property with a certain value. If the property is not public, the default value will be used. |\r\n| *be*.visible | ```$as[, $message = null]``` | Tests if the visibility is the same as the determined. Is recommended to use the constants of ```Gabrieljmj\\Should\\Options\\Visibility```. Check it [here](https://github.com/GabrielJMJ/ShouldPHP/wiki/Documentation#visibility). |\r\n\r\n### Assertions for methods parameters\r\n| Assert | Arguments | Description |\r\n| :----- | :-------- | :---------- |\r\n| *have*.acceptOnly | ```$type[, $message = null]``` | Tests if certain parameter accept determined value type. Recommended to use the contants of ```Gabrieljmj\\Should\\Options\\TypeHinting```. Check it [here](https://github.com/GabrielJMJ/ShouldPHP/wiki/Documentation#type-hinting) |\r\n| *have*.asDefaultValue | ```$value[, $message = null]``` | Tests if certain parameter of a method has the default value equals determined one. |\r\n\r\n## Options\r\n\r\n### Visibility\r\n| Constant | What means? |\r\n| :------- | :---------- |\r\n| ```Visibility::AS_PUBLIC``` | Public visibility |\r\n| ```Visibility::AS_PROTECTED``` | Protected visibility |\r\n| ```Visibility::AS_PRIVATE``` | Private visibility |\r\n\r\n### Type Hinting\r\n| Constant | What means? |\r\n| :------- | :---------- |\r\n| ```TypeHinting::ARR``` | Array type |\r\n| ```TypeHinting::CALL``` | Callable type |\r\n| ```TypeHinting::VARIADIC``` | Variadic type |\r\n| ```TypeHinting::INSTANCE_OF``` | Instance of some class or interface determined by the static method ```TypeHinting::anInstanceOf($class)```. |\r\n\r\n## Executing tests\r\n\r\nThe execetion of all tests are made with a console command. After executing, in the console will appear a little report. If some test fail, the report will explain why.\r\n```\r\nphp vendor/bin/should excute test.php\r\n```\r\n<div style=\"text-align: center;\"><img src=\"http://i.imgur.com/1n9zBaP.png\"/></div>\r\n*Yes, I use Windows. Judge me.*\r\n\r\n#### should.json\r\nThe ```should.json``` is a collection of tests, where you can indicate what tests should be executed. The file, in the truth, may have any name, but have to be JSON and to have ```ambients``` index.\r\n```json\r\n{\r\n    \"ambients\": [\r\n        \"test.php\",\r\n        \"Test\\\\UserAmbient\",\r\n        \"tests/\"\r\n    ]\r\n}\r\n```\r\n\r\n#### Rules\r\nYou can define rules for the execution tests like just test files from a directory with certain suffix or preffix. To it, indicate the rules on JSON file.\r\n```json\r\n\"rules\": {\r\n    \"directory\": {\r\n        \"suffix\": [\r\n            \"Test.php\"\r\n        ]\r\n    }\r\n}\r\n```\r\n\r\n#### Rules list\r\n\r\n| Rule | Category | What means? |\r\n| :--- | :------- | :---------- |\r\n| Suffix | Directory | Execute all ambient files with determined suffix in the name. |\r\n| Preffix | Directory | Execute all ambient files with determined preffix in the name. |\r\n\r\n**Console:**\r\n```console\r\nphp vendor/bin/should execute should.json\r\n```\r\n\r\n#### Explaining by the example\r\n| Local | Description |\r\n| :---- | :---------- |\r\n| ```test.php``` | Executes a file that return an instance of an ambient. |\r\n| ```Test\\\\UserAmbient``` | Executes all test methods from an ambient custom object. In the console you must to use ```/``` instead ```\\```. Like that: ```php vendor/bin/should excute Test/Ambient```. |\r\n| ```tests/``` | Executes all ambient files of a directory. You must to put ```/``` in the end of the directory name both console and JSON. |\r\n\r\n### Saving the report logs\r\nTo save the report logs, add the option ```-s|--save```to the execution follow by the logs file:\r\n```console\r\nphp vendor/bin/should execute should.json -s \"tests.log\"\r\n``` \r\n### Showing the report with console colors\r\nAdd the option ```-c|--colors```:\r\n```console\r\nphp vendor/bin/should execute should.json -c\r\n``` ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}